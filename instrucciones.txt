Inicializamos el proyecto

1)npm init -y
2)Instalar todas las dependencias que vamos autilizar y aclarar sus importaciones
    npm install --save-dev typescript 
    npm install --save-dev express @types/express
    npm install --save express-validator
    npm install mongoose
    npm install --save-dev eslint @typescript-eslint/eslint-plugin @typescript-eslint/parser
    npm install cors -E --save @types/cors
    npm install dotenv
    npm install --save-dev cross-env
    npm install bcrypt
    npm install --save-dev @types/bcrypt 
    npm install --save-dev ts-node-dev
    npm install jsonwebtoken
    npm i --save-dev @types/jsonwebtoken
3)importaciones de cada dependencias

    import express from 'express';
    const app = express()

    import cors from 'cors'
    app.use(cors())

    import * as dotenv from 'dotenv';
    dotenv.config();

    *En el servidor
        import { connect, disconnect } from "mongoose";

4)scripts
    "tsc": "tsc",
    "dev": "cross-env NODE_ENV=development ts-node-dev src/index.ts",
    "start": "node build/index.js",

5)Ejecutamos el siguiente comando para crear el archivo tsconfig
    npm run tsc -- --init

6)Configuramos el tsconfig
    {
  		"compilerOptions": {
    			"target": "ES6",
    			"outDir": "./build/",
    			"module": "commonjs",
    			"strict": true,
    			"noUnusedLocals": true,
    			"noUnusedParameters": true,
    			"noImplicitReturns": true, 
    			"noFallthroughCasesInSwitch": true,
    			"esModuleInterop": true
  		}
	}
7)Creamos un archivo index.ts y creamos un servidor para probar la coneccion
8)Ejecutamos el siguiente comando para crear la carpeta build
    
    npm run tsc

9)Ejecutamos npm start para probar que index.js en build funciones

    npm start
--------------------------------------------------------
Creamos la base de datos en mongoDB

1)Iniciamos sesion en mongodb y en la base de datos existente clickeamos en conectar,
luego conectar con nuestra aplicacion y copiamos la url

2)Creamos un archivo .env en la raiz del proyecto

    MONGO_DB_URL=urlCopiada
    PORT=3001

3)Creamos un archivo mongo.ts en src con la coneccion a mongodb en una funcion y la exportamos

    import mongoose from "mongoose";
    import dotenv from 'dotenv';
    dotenv.config();

    async function connect() {
        const connectionString = process.env.MONGO_DB_URL;
        try {
            await mongoose.connect(connectionString as string)
            console.log("Db conectada")
        } catch (_error) {
            console.error("Error en coneccion");
            process.exit(1)
        }
    }

    export default connect;

4)importamos la coneccion en index.ts en la funcion listen

    app.listen(PORT, async () => {
        console.log(`Server running on port ${PORT}`);
        await connect();
    });

-----------------------------------------------------
Comenzamos a crear los modelos y esquemas

1)Creamos una carpeta src/models
2)Creamos un archivo src/types.ts y ponemos los typos dentro
3)Agregamos los modelos con sus tipos

-----------------------------------------------------

Comenzamos a crear los controllers

1)Agregamos una carpeta con el nombre controllers
2)dentro los archivos con el nombre de cada router que vayamos a ocupar

-----------------------------------------------------


